# import streamlit as st
# import pandas as pd
# import plotly.express as px
# from db_config import get_engine
# from utils import protect_page, format_rupiah

# # Proteksi halaman
# protect_page()

# # Judul halaman
# st.title("Analisa Penjualan Kopi")

# # Ambil informasi user dari session
# role = st.session_state.get("role", "user")
# username = st.session_state.get("username", "Pengguna")

# # Load data dari database
# engine = get_engine()
# df = pd.read_sql("SELECT * FROM coffee_sales", engine)

# # Konversi tanggal
# df["Periode_dt"] = pd.to_datetime(df["Periode"], format="%Y-%m-%d")
# df["hour_of_day"] = pd.to_datetime(df["Periode_dt"]).dt.hour
# df["Weekday"] = df["Periode_dt"].dt.day_name()

# # Konversi BRL ke IDR
# KURS_BRL_TO_IDR = 3200
# df["money"] = df["money"] * KURS_BRL_TO_IDR

# # Filter rentang tanggal
# st.subheader("📅 Filter Rentang Tanggal")
# start_date = st.date_input("Pilih tanggal awal", value=df["Periode_dt"].min())
# end_date = st.date_input("Pilih tanggal akhir", value=df["Periode_dt"].max())

# # Pastikan filter valid
# if start_date > end_date:
#     st.warning("Tanggal awal tidak boleh lebih besar dari tanggal akhir.")
#     st.stop()

# # Filter data berdasarkan tanggal
# filtered_df = df[(df["Periode_dt"] >= pd.to_datetime(start_date)) & (df["Periode_dt"] <= pd.to_datetime(end_date))].copy()

# # Hitung metrik utama
# total_penjualan = filtered_df["money"].sum()
# jumlah_transaksi = filtered_df.shape[0]
# rata_rata_transaksi = total_penjualan / jumlah_transaksi if jumlah_transaksi > 0 else 0

# col1, col2, col3 = st.columns(3)
# col1.metric("Total Penjualan (Rp)", format_rupiah(total_penjualan))
# col2.metric("Jumlah Transaksi", f"{jumlah_transaksi:,}")
# col3.metric("Rata-rata per Transaksi", format_rupiah(rata_rata_transaksi))

# # === Grafik: Metode Pembayaran ===
# st.subheader("Metode Pembayaran")
# tanggal_info = f"{start_date.strftime('%d %b %Y')} - {end_date.strftime('%d %b %Y')}"

# fig_payment = px.pie(
#     filtered_df,
#     values="money",
#     names="cash_type",
#     title=f"Distribusi Penjualan per Metode Pembayaran ({tanggal_info})",
#     color_discrete_sequence=px.colors.sequential.RdBu
# )
# st.plotly_chart(fig_payment, use_container_width=True)

# # === Grafik: Jam Favorit Pelanggan ===
# st.subheader("Jam Favorit Pelanggan")

# jam_df = filtered_df.groupby("hour_of_day")["money"].sum().reset_index()
# jam_df["Total_Juta"] = jam_df["money"] / 1_000_000

# fig_jam = px.bar(
#     jam_df,
#     x="hour_of_day",
#     y="Total_Juta",
#     labels={"hour_of_day": "Jam", "Total_Juta": "Penjualan (Juta Rupiah)"},
#     title="Total Penjualan per Jam"
# )
# st.plotly_chart(fig_jam, use_container_width=True)

# # === Grafik: Produk Terlaris ===
# st.subheader("Top 5 Produk Terlaris")

# top5_sales = (
#     filtered_df.groupby("coffee_name", as_index=False)["money"]
#     .sum()
#     .rename(columns={"money": "total_sales"})
#     .sort_values(by="total_sales", ascending=False)
#     .head(5)
# )

# top5_sales["total_sales_juta"] = top5_sales["total_sales"] / 1_000_000

# fig_top5 = px.bar(
#     top5_sales,
#     x="coffee_name",
#     y="total_sales_juta",
#     text="total_sales_juta",
#     labels={"coffee_name": "Produk", "total_sales_juta": "Total Penjualan (Juta Rp)"},
#     title="Top 5 Produk Terlaris",
#     color="coffee_name"
# )
# st.plotly_chart(fig_top5, use_container_width=True)

# # === Grafik: Segmentasi Produk berdasarkan Kategori ===
# if "category" in filtered_df.columns:
#     st.subheader("Segmentasi Produk Berdasarkan Kategori")

#     kategori_df = (
#         filtered_df.groupby("category", as_index=False)["money"]
#         .sum()
#         .rename(columns={"money": "total_sales"})
#     )
#     kategori_df["total_sales_juta"] = kategori_df["total_sales"] / 1_000_000

#     fig_kategori = px.pie(
#         kategori_df,
#         names="category",
#         values="total_sales_juta",
#         title="Distribusi Penjualan per Kategori",
#         color_discrete_sequence=px.colors.sequential.Viridis
#     )
#     st.plotly_chart(fig_kategori, use_container_width=True)
# else:
#     st.info("Kolom kategori tidak tersedia di dataset.")

# # === SIDEBAR PROFIL & LOGOUT ===
# with st.sidebar:
#     st.markdown("### 👤 Profil")
#     st.markdown(f"**{username.title()}**")
#     st.markdown(f"Role: {role}")
#     if st.button("🚪 Logout"):
#         st.session_state.clear()
#         st.switch_page("Dashboard_Analisis_Penjualan_Kopi.py")

# # === FOOTER ===
# st.markdown("---")
# st.caption("© 2025 Coffee Shop Analyst Dashboard Created By Arjun Yuda Firwanda")





























































# import numpy as np
# import streamlit as st
# import pandas as pd
# import plotly.express as px
# import math
# from db_config import get_engine
# from utils import protect_page

# # Proteksi halaman login
# protect_page()

# # Judul halaman
# st.title("📊 Analisa Penjualan Kopi")

# # Profil user
# role = st.session_state.get("role", "user")
# username = st.session_state.get("username", "User")

# # === Fungsi Format ===
# def format_rupiah_singkat(angka):
#     if angka >= 1_000_000_000:
#         return f"Rp {angka / 1_000_000_000:.2f} M"
#     elif angka >= 1_000_000:
#         return f"Rp {angka / 1_000_000:.2f} Juta"
#     elif angka >= 1_000:
#         return f"Rp {angka / 1_000:.0f} Ribu"
#     else:
#         return f"Rp {angka:,.0f}".replace(",", ".")

# def singkat_angka(value):
#     if value >= 1_000_000_000:
#         return f"{value / 1_000_000_000:.2f} M"
#     elif value >= 1_000_000:
#         return f"{value / 1_000_000:.2f} Juta"
#     elif value >=1_000:
#         return f"{value / 1_000:.0f} Ribu"
#     else:
#         return f"{value:,.0f}".replace(",", ".")

# # Ambil data dari MySQL
# engine = get_engine()
# df = pd.read_sql("SELECT * FROM coffee_sales", engine)

# # Pastikan kolom 'date' dalam format datetime
# df["date"] = pd.to_datetime(df["date"], errors="coerce")

# if df.empty:
#     st.warning("⚠️ Tidak ada data pada rentang tanggal yang dipilih.")
#     st.stop()

# # === Sidebar Kurs & Konversi Mata Uang ===
# st.sidebar.subheader("💱 Konversi Mata Uang")
# exchange_rate = st.sidebar.number_input(
#     "Kurs BRL ke IDR", min_value=1000, max_value=10000, value=3200, step=100
# )
# df["money"] = df["money"] * exchange_rate
# st.info(f"💱 Nilai 'money' dikonversi dari BRL ke Rupiah (IDR) dengan kurs: 1 BRL = Rp {exchange_rate:,}")

# # === Filter Rentang Tanggal ===
# st.subheader("📅 Filter Rentang Tanggal")
# min_date, max_date = df["date"].min(), df["date"].max()

# # Filter rentang tanggal
# date_range = st.date_input("Pilih rentang tanggal:", [min_date, max_date])
# filtered_df = df.copy()

# if isinstance(date_range, list) and len(date_range) == 2:
#     start_date, end_date = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1])
#     filtered_df = filtered_df[(filtered_df["date"] >= start_date) & (filtered_df["date"] <= end_date)]

# # Beri peringatan jika kosong
# if filtered_df.empty:
#     st.warning("⚠️ Tidak ada data pada rentang tanggal yang dipilih.")
#     st.stop()
    
# # === Tampilkan Metrik Penjualan ===
# total_penjualan = filtered_df["money"].sum()
# jumlah_transaksi = len(filtered_df)
# rata_rata = filtered_df["money"].mean()

# col1, col2, col3 = st.columns(3)
# with col1:
#     st.metric(
#         "💰 Total Penjualan (Rp)",
#         format_rupiah_singkat(total_penjualan),
#         help=f"Total: Rp {total_penjualan:,.0f}"
#     )
# with col2:
#     st.metric(
#         "🧾 Jumlah Transaksi",
#         f"{jumlah_transaksi:,}",
#         help=f"Total Transaksi: {jumlah_transaksi:,} kali"
#     )
# with col3:
#     st.metric(
#         "📊 Rata-rata per Transaksi",
#         format_rupiah_singkat(rata_rata),
#         help=f"Rata-rata: Rp {rata_rata:,.0f}"
#     )

# # === Visualisasi Grafik Analisis ===
# st.markdown("## 📊 Visualisasi Penjualan")

# # === Grafik: ☕ Penjualan per Jenis Kopi ===
# st.subheader("☕ Penjualan per Jenis Kopi")

# # Hitung total penjualan per jenis kopi
# df_kopi = filtered_df.groupby("coffee_name")["money"].sum().reset_index().sort_values("money", ascending=False)

# # Tambahkan kolom dalam satuan juta dan label teks
# df_kopi["money_juta"] = df_kopi["money"] / 1_000_000
# df_kopi["label"] = df_kopi["money_juta"].apply(lambda x: f"Rp {x:,.2f} Juta")

# # Pilih skema warna profesional
# color_sequence = px.colors.sequential.Viridis  # Bisa diganti dengan Plasma, Blues, Tealgrn, dll.

# # Buat grafik
# fig_kopi = px.bar(
#     df_kopi,
#     x="coffee_name",
#     y="money_juta",
#     text="label",
#     color="coffee_name",  # agar tiap kopi punya warna unik
#     color_discrete_sequence=color_sequence,
#     labels={
#         "coffee_name": "Jenis Kopi",
#         "money_juta": "Total Penjualan (Juta Rp)"
#     }
# )

# # === Set sumbu Y ke kelipatan 10 Juta ===
# max_val = df_kopi["money_juta"].max()
# upper_limit = math.ceil(max_val / 10) * 10
# tick_vals = list(range(0, upper_limit + 10, 10))
# tick_texts = [f"{val} Juta" for val in tick_vals]

# # Update tampilan grafik
# fig_kopi.update_traces(
#     hovertemplate="<b>Jenis Kopi:</b> %{x}<br><b>Total Penjualan:</b> Rp %{y:,.2f} Juta",
#     textposition="outside",
#     textfont_size=12
# )

# fig_kopi.update_layout(
#     yaxis=dict(
#         tickvals=tick_vals,
#         ticktext=tick_texts,
#         title="Total Penjualan"
#     ),
#     xaxis_title="Jenis Kopi",
#     uniformtext_minsize=8,
#     uniformtext_mode='hide',
#     showlegend=False,
#     plot_bgcolor='rgba(0,0,0,0)',
#     paper_bgcolor='rgba(0,0,0,0)',
#     font=dict(size=12),
#     margin=dict(t=30, b=80),
# )
# st.plotly_chart(fig_kopi, use_container_width=True)

# # === Grafik: 💳 Penjualan Berdasarkan Metode Pembayaran ===
# st.subheader("💳 Penjualan Berdasarkan Metode Pembayaran")
# fig_payment = px.pie(filtered_df, values="money", names="cash_type", title="Distribusi Penjualan per Metode Pembayaran")
# st.plotly_chart(fig_payment, use_container_width=True)

# # === Grafik: 📅 Penjualan per Hari dalam Seminggu ===
# st.subheader("📅 Penjualan per Hari dalam Seminggu")

# # Mapping angka ke nama hari
# nama_hari = {
#     1: "Senin",
#     2: "Selasa",
#     3: "Rabu",
#     4: "Kamis",
#     5: "Jumat",
#     6: "Sabtu",
#     7: "Minggu"
# }

# # Pastikan kolom Weekdaysort tersedia
# if "Weekdaysort" in filtered_df.columns:

#     # Hitung total penjualan berdasarkan angka hari
#     df_per_hari = filtered_df.groupby("Weekdaysort")["money"].sum().reset_index()

#     # Tambahkan nama hari dan satuan juta
#     df_per_hari["Hari"] = df_per_hari["Weekdaysort"].map(nama_hari)
#     df_per_hari["money_juta"] = df_per_hari["money"] / 1_000_000
#     df_per_hari["label"] = df_per_hari["money_juta"].apply(lambda x: f"Rp {x:,.2f} Juta")

#     # Urutkan hari
#     df_per_hari = df_per_hari.sort_values("Weekdaysort")

#     # Warna kustom (bisa kamu sesuaikan jika perlu)
#     warna_hari = [
#         "#4C72B0",  # Senin
#         "#55A868",  # Selasa
#         "#C44E52",  # Rabu
#         "#8172B2",  # Kamis
#         "#CCB974",  # Jumat
#         "#64B5CD",  # Sabtu
#         "#FF8C42"   # Minggu
#     ]

#     # Plot grafik
#     fig_harian = px.bar(
#         df_per_hari,
#         x="Hari",
#         y="money_juta",
#         text="label",
#         color="Hari",
#         color_discrete_sequence=warna_hari,
#         labels={"money_juta": "Total Penjualan (Juta Rp)", "Hari": "Hari"}
#     )

#     # Hitung kelipatan 10 untuk sumbu Y
#     max_val = df_per_hari["money_juta"].max()
#     upper_limit = math.ceil(max_val / 10) * 10
#     tick_vals = list(range(0, upper_limit + 10, 10))
#     tick_texts = [f"{val} Juta" for val in tick_vals]

#     # Update tampilan
#     fig_harian.update_traces(
#         hovertemplate="<b>%{x}</b><br>Total Penjualan: Rp %{y:,.2f} Juta",
#         textposition="outside",
#         textfont_size=12
#     )

#     fig_harian.update_layout(
#         yaxis=dict(
#             tickvals=tick_vals,
#             ticktext=tick_texts,
#             title="Total Penjualan"
#         ),
#         xaxis_title="Hari",
#         uniformtext_minsize=8,
#         uniformtext_mode='hide',
#         showlegend=False
#     )

#     st.plotly_chart(fig_harian, use_container_width=True)

# else:
#     st.warning("Kolom 'Weekdaysort' tidak ditemukan.")

# # === Grafik: ⏰ Penjualan Berdasarkan Jam ===
# st.subheader("⏰ Penjualan Berdasarkan Jam")

# # Hitung total penjualan per jam
# df_per_jam = filtered_df.groupby("hour_of_day")["money"].sum().reset_index()
# df_per_jam["money_juta"] = df_per_jam["money"] / 1_000_000

# # Buat grafik line
# fig_hour = px.line(
#     df_per_jam,
#     x="hour_of_day",
#     y="money_juta",
#     markers=True,
#     labels={
#         "hour_of_day": "Jam",
#         "money_juta": "Total Penjualan (Juta Rp)"
#     },
#     title="Total Penjualan per Jam"
# )

# # Hitung batas atas untuk sumbu Y (kelipatan 10 juta)
# max_val = df_per_jam["money_juta"].max()
# upper_limit = math.ceil(max_val / 10) * 10
# tick_vals = list(range(0, upper_limit + 10, 10))
# tick_texts = [f"{val} Juta" for val in tick_vals]

# # Atur tampilan grafik
# fig_hour.update_traces(
#     line=dict(width=4, color="cornflowerblue"),  # ❗️Menambah ketebalan garis
#     marker=dict(size=10, color="dodgerblue"),  # Perbesar marker titik (opsional)
#     hovertemplate="<b>Jam %{x}</b><br>Total Penjualan: Rp %{y:,.2f} Juta"
# )

# fig_hour.update_layout(
#     yaxis=dict(
#         tickvals=tick_vals,
#         ticktext=tick_texts,
#         title="Total Penjualan"
#     ),
#     xaxis_title="Jam",
#     showlegend=False
# )

# st.plotly_chart(fig_hour, use_container_width=True)

# # === Info: ⏰ Jam Tersibuk ===
# busiest_hour = filtered_df["hour_of_day"].value_counts().idxmax()
# st.info(f"⏰ **Jam Tersibuk:** {busiest_hour}:00")

# # === Grafik: 🏆 Top 5 Produk Terlaris ===
# st.subheader("🏆 Top 5 Produk Terlaris")

# top5_sales = (
#     filtered_df.groupby("coffee_name", as_index=False)["money"]
#     .sum()
#     .rename(columns={"money": "total_sales"})
#     .sort_values(by="total_sales", ascending=False)
#     .head(5)
# )

# # Konversi ke juta
# top5_sales["total_sales_juta"] = top5_sales["total_sales"] / 1e6
# top5_sales["label"] = top5_sales["total_sales_juta"].apply(lambda x: f"Rp {x:,.2f} Juta")

# # Sort descending supaya yang terbesar muncul di atas (karena horizontal bar)
# top5_sorted = top5_sales.sort_values(by="total_sales_juta", ascending=False)

# # Buat grafik
# fig_top5 = px.bar(
#     top5_sorted,
#     x="total_sales_juta",
#     y="coffee_name",
#     orientation="h",
#     text="label",
#     color="coffee_name",
#     labels={
#         "coffee_name": "Jenis Kopi",
#         "total_sales_juta": "Total Penjualan (Juta Rp)"
#     }
# )

# # Hitung kelipatan 10 juta untuk sumbu X
# max_val = top5_sorted["total_sales_juta"].max()
# upper_limit = math.ceil(max_val / 10) * 10
# tick_vals = list(range(0, upper_limit + 10, 10))
# tick_texts = [f"{val} Juta" for val in tick_vals]

# # Update tampilan
# fig_top5.update_traces(
#     textposition="inside",
#     textfont_size=12,
#     hovertemplate='%{y}<br>Rp %{x:,.2f} Juta<extra></extra>'
# )

# fig_top5.update_layout(
#     showlegend=False,
#     xaxis=dict(
#         tickvals=tick_vals,
#         ticktext=tick_texts,
#         title="Total Penjualan"
#     )
# )

# st.plotly_chart(fig_top5, use_container_width=True)

# # === Grafik: 📈 Jumlah Transaksi per Jam (Vertical Bar) ===
# st.subheader("📈 Jumlah Transaksi per Jam")

# # Hitung jumlah transaksi per jam
# df_transaksi_jam = filtered_df.groupby("hour_of_day").size().reset_index(name="jumlah_transaksi")
# df_transaksi_jam["label_jam"] = df_transaksi_jam["hour_of_day"].apply(lambda x: f"Jam {x:02d}")

# # Buat bar chart vertikal dengan tema gelap
# fig_transaksi_hour = px.bar(
#     df_transaksi_jam,
#     x="label_jam",
#     y="jumlah_transaksi",
#     text="jumlah_transaksi",
#     labels={
#         "label_jam": "Jam",
#         "jumlah_transaksi": "Jumlah Transaksi"
#     },
#     title="Jumlah Transaksi per Jam",
#     color="jumlah_transaksi",
#     color_continuous_scale="Tealgrn",  # Bisa ganti: "Blues", "Inferno", "Viridis"
#     template="plotly_dark"  # Tema gelap
# )

# # Atur tampilan tambahan
# fig_transaksi_hour.update_traces(
#     textposition="outside",
#     textfont=dict(size=12),
#     marker_line_color='rgba(255,255,255,0.6)',  # Outline terang
#     marker_line_width=1.5
# )

# fig_transaksi_hour.update_layout(
#     plot_bgcolor="#1e1e1e",
#     paper_bgcolor="#1e1e1e",
#     font=dict(color="white", size=13),
#     title_font=dict(size=15, color="white"),
#     xaxis_title="Jam",
#     yaxis_title="Jumlah Transaksi",
#     showlegend=False
# )

# # Tampilkan grafik
# st.plotly_chart(fig_transaksi_hour, use_container_width=True)

# # === Grafik: 🥧 Komposisi Penjualan per Time of Day) ===
# st.subheader("🥧 Komposisi Penjualan per Time of Day")

# # Hitung total penjualan per Time of Day
# df_timeofday = filtered_df.groupby("Time_of_Day")["money"].sum().reset_index()
# df_timeofday["money_juta"] = df_timeofday["money"] / 1_000_000
# df_timeofday["label"] = df_timeofday["money_juta"].apply(lambda x: f"Rp {x:,.2f} Juta")

# # Buat Pie Chart
# fig_pie = px.pie(
#     df_timeofday,
#     names="Time_of_Day",
#     values="money_juta",
#     color_discrete_sequence=px.colors.qualitative.Pastel,  # warna profesional & lembut
#     hole=0.4,  # Donut chart style
# )

# # Tambahkan format hover dan label
# fig_pie.update_traces(
#     textinfo="percent+label",
#     hovertemplate="<b>%{label}</b><br>Total: Rp %{value:,.2f} Juta",
#     textfont_size=14
# )

# fig_pie.update_layout(
#     title="Komposisi Penjualan Berdasarkan Time of Day",
#     title_font_size=18,
#     paper_bgcolor="rgba(0,0,0,0)",  # transparan
#     plot_bgcolor="rgba(0,0,0,0)"
# )

# # Tampilkan di Streamlit
# st.plotly_chart(fig_pie, use_container_width=True)

# # === Grafik: 📈 Tren Penjualan per Jenis Kopi (Bulanan) ===
# st.subheader("📈 Tren Penjualan per Jenis Kopi (Bulanan)")

# # Pastikan kolom datetime bertipe datetime
# filtered_df["datetime"] = pd.to_datetime(filtered_df["datetime"])

# # Buat kolom bulan-tahun
# filtered_df["bulan_tahun"] = filtered_df["datetime"].dt.to_period("M").astype(str)

# # Hitung total penjualan per jenis kopi per bulan
# df_tren_kopi = (
#     filtered_df.groupby(["bulan_tahun", "coffee_name"])["money"]
#     .sum()
#     .reset_index()
# )

# # Ubah ke format pivot (agar setiap jenis kopi jadi satu garis)
# df_tren_pivot = df_tren_kopi.pivot(index="bulan_tahun", columns="coffee_name", values="money").fillna(0)
# df_tren_pivot = df_tren_pivot / 1_000_000  # Konversi ke Juta

# # Buat grafik line
# fig_tren = px.line(
#     df_tren_pivot,
#     x=df_tren_pivot.index,
#     y=df_tren_pivot.columns,
#     markers=True,
#     labels={"value": "Total Penjualan (Juta Rp)", "bulan_tahun": "Periode Bulan"},
#     title="Tren Penjualan per Jenis Kopi"
# )

# fig_tren.update_layout(
#     xaxis_title="Bulan",
#     yaxis_title="Total Penjualan (Juta Rp)",
#     title_font_size=18,
#     plot_bgcolor="rgba(0,0,0,0)",
#     paper_bgcolor="rgba(0,0,0,0)",
#     legend_title_text="Jenis Kopi",
#     hovermode="x unified"
# )

# fig_tren.update_traces(line=dict(width=2))  # Pertebal garis

# st.plotly_chart(fig_tren, use_container_width=True)


# # === Grafik: 📊 Jumlah Transaksi per Time of Day ===
# st.subheader("📊 Jumlah Transaksi per Time of Day")

# if "Time_of_Day" in filtered_df.columns:
#     # Hitung jumlah transaksi per Time_of_Day
#     count_data = filtered_df["Time_of_Day"].value_counts().reset_index()
#     count_data.columns = ["Time_of_Day", "Jumlah Transaksi"]

#     # Warna khusus untuk tiap kategori Time_of_Day
#     custom_colors = {
#         "Morning": "#FFA07A",     # Salmon
#         "Afternoon": "#20B2AA",   # LightSeaGreen
#         "Night": "#9370DB"        # MediumPurple
#     }

#     # Buat grafik batang
#     fig_bar_count = px.bar(
#         count_data,
#         x="Time_of_Day",
#         y="Jumlah Transaksi",
#         color="Time_of_Day",
#         text="Jumlah Transaksi",
#         title="Frekuensi Transaksi Berdasarkan Time of Day",
#         color_discrete_map=custom_colors
#     )

#     # Tambahan gaya visual
#     fig_bar_count.update_traces(
#         textposition="outside",
#         marker_line_color='white',
#         marker_line_width=1
#     )

#     # Atur layout tema gelap
#     fig_bar_count.update_layout(
#         plot_bgcolor="#2D2D2D",
#         paper_bgcolor="#1F1F1F",
#         font=dict(color="white"),
#         title_font=dict(size=18),
#         xaxis=dict(title="Time of Day", showgrid=False, color="white"),
#         yaxis=dict(title="Jumlah Transaksi", showgrid=True, gridcolor="#444", color="white"),
#         showlegend=False  # Jika ingin menyembunyikan legend (opsional)
#     )

#     st.plotly_chart(fig_bar_count, use_container_width=True)
# else:
#     st.warning("⚠️ Kolom 'Time_of_Day' tidak tersedia.")


# # === Grafik: 📊 Rata-rata Penjualan per Transaksi per Jenis Kopi ===
# st.subheader("💹 Rata-rata Penjualan per Transaksi per Jenis Kopi")

# avg_per_kopi = (
#     filtered_df.groupby("coffee_name")["money"]
#     .mean()
#     .reset_index()
#     .sort_values(by="money", ascending=False)
# )

# avg_per_kopi["money_text"] = avg_per_kopi["money"].apply(format_rupiah_singkat)

# fig_avg_kopi = px.bar(
#     avg_per_kopi,
#     x="coffee_name",
#     y="money",
#     color="coffee_name",  # tetap berdasarkan jenis kopi
#     labels={"money": "Rata-rata per Transaksi (Rp)", "coffee_name": "Jenis Kopi"},
#     color_discrete_sequence=px.colors.qualitative.Prism,  # 🎨 Warna lebih vibrant
#     text=avg_per_kopi["money"].apply(lambda x: f"Rp {x:,.0f}".replace(",", ".")),
# )

# fig_avg_kopi.update_traces(
#     textposition="outside",
#     textfont=dict(size=11),
#     hovertemplate='<b>%{x}</b><br>Rata-rata: %{customdata}<extra></extra>',
#     customdata=avg_per_kopi["money_text"]
# )

# fig_avg_kopi.update_layout(
#     plot_bgcolor="#2D2D2D",
#     paper_bgcolor="#1F1F1F",
#     font=dict(color="white", size=13),
#     title_font_size=18,
#     xaxis=dict(title="", tickangle=-45, color="white"),
#     yaxis=dict(title="Rata-rata Penjualan (Rp)", color="white"),
#     showlegend=False,
#     margin=dict(t=60, b=100)
# )

# st.plotly_chart(fig_avg_kopi, use_container_width=True)


# # === Grafik: 📈 Tren Pendapatan Harian per Time of Day ===
# st.subheader("📈 Tren Pendapatan Harian per Time of Day")

# filtered_df["date"] = pd.to_datetime(filtered_df["date"])

# # Hitung total pendapatan per hari per Time_of_Day
# daily_trend = (
#     filtered_df.groupby(["date", "Time_of_Day"])["money"]
#     .sum()
#     .reset_index()
#     .sort_values(by="date")
# )

# # Buat grafik garis
# fig_trend = px.line(
#     daily_trend,
#     x="date",
#     y="money",
#     color="Time_of_Day",
#     markers=True,
#     labels={
#         "date": "Tanggal",
#         "money": "Pendapatan (Rp)",
#         "Time_of_Day": "Waktu"
#     },
#     color_discrete_sequence=px.colors.qualitative.Bold,
# )

# # Hover hanya tanggal dan nilai (tanpa waktu)
# fig_trend.update_traces(
#     hovertemplate="%{x|%d %b %Y}<br>Pendapatan: Rp %{y:,.0f}",
#     line=dict(width=2),
# )

# fig_trend.update_layout(
#     plot_bgcolor="#1A1B1E",
#     paper_bgcolor="#121212",
#     font=dict(color="#E0E0E0", size=13),
#     xaxis=dict(color="#CCCCCC", showgrid=False),
#     yaxis=dict(
#         title="Pendapatan (Rp)",
#         color="#CCCCCC",
#         gridcolor="rgba(255,255,255,0.1)",
#         tickformat=",",
#         tickprefix="Rp ",
#     ),
#     margin=dict(t=40, b=80),
#     legend=dict(title=None),
#     hovermode="x unified"
# )

# st.plotly_chart(fig_trend, use_container_width=True)


# # === Grafik: 📅☕ Top 5 Kopi Favorit per Hari ===
# st.subheader("📅☕ Top 5 Kopi Favorit per Hari")

# # Ubah kolom waktu ke datetime jika belum
# filtered_df["date"] = pd.to_datetime(filtered_df["date"])

# # Konversi hari ke Bahasa Indonesia
# filtered_df["Weekday"] = filtered_df["date"].dt.weekday.map({
#     0: "Senin",
#     1: "Selasa",
#     2: "Rabu",
#     3: "Kamis",
#     4: "Jumat",
#     5: "Sabtu",
#     6: "Minggu"
# })

# # Urutan hari supaya tampil rapi di grafik
# day_order = ['Senin', 'Selasa', 'Rabu', 'Kamis', 'Jumat', 'Sabtu', 'Minggu']
# filtered_df["Weekday"] = pd.Categorical(filtered_df["Weekday"], categories=day_order, ordered=True)

# # Hitung jumlah transaksi kopi per hari
# kopi_mingguan = (
#     filtered_df.groupby(["Weekday", "coffee_name"])
#     .size()
#     .reset_index(name="jumlah_transaksi")
# )

# # Ambil Top 5 kopi per hari
# top5_kopi_per_hari = (
#     kopi_mingguan.sort_values(["Weekday", "jumlah_transaksi"], ascending=[True, False])
#     .groupby("Weekday")
#     .head(5)
# )

# # Buat grafik bar horizontal dengan facet row
# fig_mingguan = px.bar(
#     top5_kopi_per_hari,
#     x="jumlah_transaksi",
#     y="coffee_name",
#     color="Weekday",
#     orientation='h',
#     facet_row="Weekday",
#     category_orders={"Weekday": day_order},
#     labels={
#         "jumlah_transaksi": "Jumlah Transaksi",
#         "coffee_name": "Kopi",
#         "Weekday": "Hari"
#     },
#     title="Top 5 Kopi Favorit per Hari"
# )

# fig_mingguan.update_layout(
#     height=1200,
#     showlegend=False,
#     yaxis=dict(categoryorder="total ascending")
# )

# st.plotly_chart(fig_mingguan, use_container_width=True)


# # === Grafik: 🗓️☕ Top 5 Kopi Favorit per Bulan ===
# st.subheader("🗓️☕ Top 5 Kopi Favorit per Bulan")

# # Konversi bulan ke Bahasa Indonesia (sudah disimpan di kolom 'Month_name')
# filtered_df["Month_name"] = filtered_df["date"].dt.month.map({
#     1: "Januari", 2: "Februari", 3: "Maret", 4: "April",
#     5: "Mei", 6: "Juni", 7: "Juli", 8: "Agustus",
#     9: "September", 10: "Oktober", 11: "November", 12: "Desember"
# })

# # Urutan bulan supaya rapi
# month_order = ["Januari", "Februari", "Maret", "April", "Mei", "Juni",
#                "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
# filtered_df["Month_name"] = pd.Categorical(filtered_df["Month_name"], categories=month_order, ordered=True)

# # Hitung jumlah transaksi kopi per bulan
# kopi_bulanan = (
#     filtered_df.groupby(["Month_name", "coffee_name"])
#     .size()
#     .reset_index(name="jumlah_transaksi")
# )

# # Ambil Top 5 kopi per bulan
# top5_kopi_per_bulan = (
#     kopi_bulanan.sort_values(["Month_name", "jumlah_transaksi"], ascending=[True, False])
#     .groupby("Month_name")
#     .head(5)
# )

# # Visualisasi dengan Plotly
# fig_bulanan = px.bar(
#     top5_kopi_per_bulan,
#     x="jumlah_transaksi",
#     y="coffee_name",
#     color="Month_name",
#     orientation='h',
#     facet_row="Month_name",
#     category_orders={"Month_name": month_order},
#     labels={
#         "jumlah_transaksi": "Jumlah Transaksi",
#         "coffee_name": "Kopi",
#         "Month_name": "Bulan"
#     },
#     title="Top 5 Kopi Favorit per Bulan"
# )

# fig_bulanan.update_layout(
#     height=1400,
#     showlegend=False,
#     yaxis=dict(categoryorder="total ascending")
# )

# st.plotly_chart(fig_bulanan, use_container_width=True)


# # === Grafik: 💰📆 Penjualan Bulanan ===
# st.subheader("💰📆 Penjualan Bulanan")

# # Pastikan kolom 'date' dalam format datetime
# filtered_df["date"] = pd.to_datetime(filtered_df["date"])

# # Ambil bulan & tahun
# filtered_df["Bulan"] = filtered_df["date"].dt.month
# filtered_df["Tahun"] = filtered_df["date"].dt.year

# # Mapping nama bulan ke Bahasa Indonesia
# nama_bulan = {
#     1: "Januari", 2: "Februari", 3: "Maret", 4: "April",
#     5: "Mei", 6: "Juni", 7: "Juli", 8: "Agustus",
#     9: "September", 10: "Oktober", 11: "November", 12: "Desember"
# }
# filtered_df["Nama_Bulan"] = filtered_df["Bulan"].map(nama_bulan)

# # Gabungkan bulan dan tahun untuk ditampilkan
# filtered_df["Periode"] = filtered_df["Nama_Bulan"] + " " + filtered_df["Tahun"].astype(str)

# # Urutkan berdasarkan waktu (agar bar chart urut)
# filtered_df["Periode_dt"] = pd.to_datetime(filtered_df["date"].dt.to_period("M").astype(str))
# df_sorted = filtered_df.sort_values("Periode_dt")

# # Agregasi penjualan bulanan
# penjualan_bulanan = (
#     df_sorted.groupby(df_sorted["Periode_dt"].dt.to_period("M"))["money"]
#     .sum()
#     .reset_index()
# )
# penjualan_bulanan["Periode"] = penjualan_bulanan["Periode_dt"].astype(str)
# penjualan_bulanan["Total_Juta"] = (penjualan_bulanan["money"] / 1_000_000).round(2)

# # Plotly bar chart
# fig_penjualan = px.bar(
#     penjualan_bulanan,
#     x="Periode",
#     y="Total_Juta",
#     text="Total_Juta",
#     color="Periode",
#     color_discrete_sequence=px.colors.sequential.Viridis,
#     labels={
#         "Periode": "Bulan",
#         "Total_Juta": "Total Penjualan (Rp Juta)"
#     },
# )

# # Update teks & hover
# fig_penjualan.update_traces(
#     texttemplate="Rp %{text} Juta",
#     textposition="outside",
#     hovertemplate="<b>Bulan:</b> %{x}<br><b>Total Penjualan:</b> Rp %{y} Juta<extra></extra>"
# )

# fig_penjualan.update_layout(
#     xaxis_tickangle=-45,
#     yaxis_title="Total Penjualan (Rp Juta)",
#     xaxis_title="Periode"
# )

# st.plotly_chart(fig_penjualan, use_container_width=True)

# # === Sidebar Profil & Logout ===
# with st.sidebar:
#     st.markdown("### 👤 Profil")
#     st.markdown(f"**{username.title()}**")
#     st.markdown(f"Role: {role}")
#     if st.button("🚪 Logout"):
#         st.session_state.clear()
#         st.switch_page("Dashboard_Analisis_Penjualan_Kopi.py")

# # === Footer ===
# st.markdown("---")
# st.caption("© 2025 Coffee Shop Analyst Dashboard Created By Arjun Yuda Firwanda")